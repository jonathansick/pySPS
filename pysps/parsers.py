#!/usr/bin/env python
# encoding: utf-8
"""
Parsers for FSPS output files.

History
-------
2011-12-30 - Created by Jonathan Sick

"""

import os
import numpy as np

from sp_params import FILTER_LIST

class SpecParser(object):
    """Parses spectral tables generated by FSPS
    
    Parameters
    ----------

    specPath : str
        Path to the .spec file.
    specType : str, 'basel' or 'miles'
        The spectral catalog used by FSPS to generate this spectrum.

    Attributes
    ----------

    data : numpy record array
        Record arrays with columns `age`, `mass`, `lbol`, `sfr`, and `spec`.
        Each item in teh `spec` column is the length of `wavelenghs`.
    wavelengths : ndarray (1D)
        Wavelength axis of the spectra.
    """
    def __init__(self, specPath, specType='basel'):
        #super(SpecParser, self).__init__()
        self.specPath = specPath
        self.specType = specType
        nLambda = SpecParser.nlambda(specType)
        
        f = open(specPath, 'r')
        allLines = f.readlines()
        nRows, nLambda = [int(a) for a in allLines[8].split()]

        dtype = [('age',np.float),('mass',np.float),('lbol',np.float),
                ('sfr',np.float),('spec',np.float,nLambda)]
        labelCols = ('age','mass','lbol','sfr')
        self.data = np.zeros(nRows, dtype=dtype)
        for i in xrange(nRows):
            iLabel = 10 + i*2
            iSpec = iLabel + 1
            for c,x in zip(labelCols, allLines[iLabel].split()):
                self.data[c][i] = float(x)
            spec = np.array([float(x) for x in allLines[iSpec].split()])
            self.data['spec'][i] = spec
        f.close()
    
    @classmethod
    def nlambda(cls, specType):
        """Get the number of wavelengths expected in this spectrum."""
        if specType == 'basel':
            return 1963 # as of v2.3
        elif specType == 'miles':
            return 4222 # FIXME for v2.3
        else:
            assert "spec type invalid:", specType

    @property
    def wavelengths(self):
        """Get the numpy wavelength vector."""
        fspsDir = os.environ['SPS_HOME'] # environment variable for FSPS
        # print fspsDir
        if self.specType == "basel":
            lambdaPath = os.path.join(fspsDir,"SPECTRA","BaSeL3.1","basel.lambda")
        elif self.specType == "miles":
            lambdaPath = os.path.join(fspsDir,"SPECTRA","MILES","miles.lambda")
        else:
            assert "spec type invalid:", self.specType
        lam = np.loadtxt(lambdaPath)
        return lam

class MagParser(object):
    """Parses magnitude tables generated by FSPS.
    
    Parameters
    ----------

    magPath : str
       Path to the .mag file

    Attributes
    ----------

    data : record array
       Has columns `age`, `mass`, `lbol`, `sfr`, and magnitudes listed in
       the `FILTER_NAMES` module attribute.
    """
    def __init__(self, magPath):
        #super(MagParser, self).__init__()
        self.magPath = magPath
        
        # Define data type in same order as .mag columns so we can
        # generate a .mag record array in one line
        dt = [('age',np.float),('mass',np.float),('lbol',np.float),('sfr',np.float)]
        dt += [(name,np.float) for (idx,name,comment) in FILTER_LIST]
        self.data = np.loadtxt(magPath, comments="#", dtype=dt)
        self.data = np.atleast_1d(self.data) # to protect against 1 age results
        # NOTE be careful here as older outputs may not have the complete
        # set of outputs; perhaps allow for *fewer* filters
        # NOTE that loadtxt has no compatibility with bad data; use genfromtxt
        # http://docs.scipy.org/doc/numpy/user/basics.io.genfromtxt.html
        # genfromtxt is slower; perhaps use it as a backup?
